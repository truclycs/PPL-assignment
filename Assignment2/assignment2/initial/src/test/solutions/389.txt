Program([FuncDecl(Id(main),[],IntType,Block([VarDecl(base,IntType),VarDecl(powerRaised,IntType),VarDecl(result,IntType),CallExpr(Id(printf),[StringLiteral(Enter base number: )]),CallExpr(Id(scanf),[StringLiteral(%d),Id(base)]),CallExpr(Id(printf),[StringLiteral(Enter power number(positive integer): )]),CallExpr(Id(scanf),[StringLiteral(%d),Id(powerRaised)]),BinaryOp(=,Id(result),CallExpr(Id(power),[Id(base),Id(powerRaised)])),CallExpr(Id(printf),[StringLiteral(%d^%d = %d),Id(base),Id(powerRaised),Id(result)]),Return(IntLiteral(0))])),FuncDecl(Id(power),[VarDecl(base,IntType),VarDecl(powerRaised,IntType)],IntType,Block([If(BinaryOp(!=,Id(powerRaised),IntLiteral(0)),Return(BinaryOp(*,Id(base),CallExpr(Id(power),[Id(base),BinaryOp(-,Id(powerRaised),IntLiteral(1))]))),Return(IntLiteral(1)))]))])