Program([FuncDecl(Id(isPrime),[VarDecl(n,IntType)],BoolType,Block([VarDecl(j,IntType),VarDecl(flag,IntType),For(BinaryOp(=,Id(j),IntLiteral(2));BinaryOp(<=,Id(j),BinaryOp(/,Id(n),IntLiteral(2)));BinaryOp(=,Id(j),BinaryOp(+,Id(j),IntLiteral(1)));Block([If(BinaryOp(==,BinaryOp(%,Id(n),Id(j)),IntLiteral(0)),Block([BinaryOp(=,Id(flag),IntLiteral(0)),Break()]))])),Return(Id(flag))])),FuncDecl(Id(main),[],IntType,Block([VarDecl(n,IntType),CallExpr(Id(scanf),[StringLiteral(%d),Id(n)]),If(CallExpr(Id(isPrime),[Id(n)]),CallExpr(Id(printf),[StringLiteral(%d is a prime number.),Id(n)]),CallExpr(Id(printf),[StringLiteral(%d is not a prime number.),Id(n)])),Return(IntLiteral(0))]))])